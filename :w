package verifio

import (
	"database/sql"
	"errors"
	"time"

	"github.com/gnames/bhlindex/config"
	"github.com/gnames/bhlindex/ent/verif"
	"github.com/rs/zerolog/log"
)

type verificationStatus int

const (
	Init verificationStatus = iota
	AllNamesHarvested
	AllNamesVerified
	AllErrorsProcessed
)

var batchSize = 5_000

type metaData struct {
	Status        verificationStatus
	StaleErrTries int
}

type verifio struct {
	cfg config.Config
	db  *sql.DB
	metaData
}

func New(cfg config.Config, db *sql.DB) verif.VerifierBHL {
	res := verifio{
		cfg: cfg,
		db:  db,
	}
	return res
}

func (vrf verifio) Verify() error {
	noNames, err := vrf.noDetectedNames
	if err != nil {
		return err
	}
	if noNames {
		err := errors.New("detected_names table is empty")
		log.Warn().Err(err).Msg("Run 'bhlindex find' before 'bhlindex verify'")
		return err
	}

	err := vrf.dedupeNames()
	if err != nil {
		return err
	}

	namesNum, err := vrf.numberOfNames()
	if err != nil {
		return err
	}

	log.Info().Msgf("Verifying %d names", namesNum)

	return vrf.verifyNames(namesNum)
}

func (vrf verifio) verifyNames(namesNum int) error {
	start := time.Now()
	return nil
}

func (vrf verifio) noDetectedNames() (bool, error) {
	var page_id string
	q := "select page_id from detected_names limit 1"
	err := vrf.db.QueryRow(q).Scan(&page_id)
	return page_id == "", err
}

func (vrf verifio) numberOfNames() (int, error) {
	q := "select count(*) from name_statuses"
	var namesNum int
	err := vrf.db.QueryRow(q).Scan(&namesNum)
	return namesNum, err
}

func (vfr verifio) dedupeNames() error {
	log.Info().Msg("Extracting unique name-strings. It will take a while.")
	q := `INSERT INTO name_statuses
          SELECT name_string, AVG(odds_log10), count(*), false
            FROM detected_names GROUP BY name_string
            ORDER BY name_string`

	stmt, err := vfr.db.Prepare(q)
	if err != nil {
		return err
	}

	_, err = stmt.Exec()
	if err != nil {
		return err
	}

	err = stmt.Close()
	if err != nil {
		return err
	}
	vfr.Status = AllNamesHarvested
	return nil
}
